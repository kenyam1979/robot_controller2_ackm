<?xml version="1.0"?>
<!-- 4 wheel car with front steering and rear drive based on Tamiya TT02 -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:macro name="tt02_body" params="name prefix">
    <!--==================================================
      ===== Define robot constants                 =====
      ==================================================-->

    <!-- Size in meter -->
    <xacro:property name="base_width" value="0.12" />
    <xacro:property name="base_length" value="0.37" />
    <xacro:property name="base_height" value="0.03" />

    <xacro:property name="wheel_radius" value="0.032" />
    <xacro:property name="wheel_width" value="0.025" />
    <xacro:property name="wheel_ygap" value="0.018" />
    <xacro:property name="wheel_zoff" value="0.00" />
    <xacro:property name="wheel_rear_xoff" value="0.14" />
    <xacro:property name="wheel_front_xoff" value="0.12" />

    <!-- <xacro:property name="caster_xoff" value="0.085" /> -->
    <!-- <xacro:property name="caster_radius" value="0.01" /> -->

    <!-- <xacro:property name="caster_base_width" value="0.035" /> -->
    <!-- <xacro:property name="caster_base_length" value="0.028" /> -->
    <!-- <xacro:property name="caster_base_height"
    value="${wheel_radius+wheel_zoff-(base_height/2)-(caster_radius*2)}" /> -->

    <!-- <xacro:property name="lidar_xoff" value="0.05" /> -->
    <!-- <xacro:property name="lidar_height" value="0.06" /> -->
    <!-- <xacro:property name="lidar_radius" value="0.035" /> -->

    <!-- <xacro:property name="battery_width" value="${base_width}" /> -->
    <!-- <xacro:property name="battery_length" value="0.09" /> -->
    <!-- <xacro:property name="battery_height" value="0.025" /> -->

    <!-- <xacro:property name="imu_width" value="0.06" /> -->
    <!-- <xacro:property name="imu_length" value="0.045" /> -->
    <!-- <xacro:property name="imu_height" value="0.01" /> -->

    <!-- <xacro:property name="raspi_xoff" value="0.067" /> -->
    <!-- <xacro:property name="raspi_width" value="0.085" /> -->
    <!-- <xacro:property name="raspi_length" value="0.056" /> -->
    <!-- <xacro:property name="raspi_height" value="0.03" /> -->

    <!-- <xacro:property name="camera_xoff" value="0.125" /> -->
    <!-- <xacro:property name="camera_width" value="0.03" /> -->
    <!-- <xacro:property name="camera_length" value="0.03" /> -->
    <!-- <xacro:property name="camera_height" value="0.03" /> -->

    <!-- Mass in kg -->
    <xacro:property name="base_mass" value="1.300" />
    <xacro:property name="wheel_mass" value="0.034" />
    <!-- <xacro:property name="caster_mass" value="0.05" /> -->
    <!-- <xacro:property name="battery_mass" value="0.107" /> -->
    <!-- <xacro:property name="lidar_mass" value="0.17" /> -->
    <!-- <xacro:property name="imu_mass" value="0.0544" /> -->
    <!-- <xacro:property name="raspi_mass" value="0.047" /> -->
    <!-- <xacro:property name="camera_mass" value="0.047" /> -->

    <!--==================================================
      ===== Define inertial property macros        =====
      ==================================================-->

    <xacro:macro name="box_inertia" params="m w h d">
      <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
        <mass value="${m}" />
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}"
          iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
      </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
      <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <mass value="${m}" />
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}"
          iyz="0" izz="${(m/2) * (r*r)}" />
      </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
      <inertial>
        <mass value="${m}" />
        <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0"
          izz="${(2/5) * m * (r*r)}" />
      </inertial>
    </xacro:macro>

    <!--==================================================
      ===== Define links and joints                =====
      ==================================================-->

    <link name="base_link" />

    <!-- Robot Body -->
    <link name="base_body">
      <visual>
        <geometry>
          <box size="${base_length} ${base_width} ${base_height}" />
        </geometry>
        <material name="Cyan">
          <color rgba="0 1.0 1.0 1.0" />
        </material>
      </visual>

      <collision>
        <geometry>
          <box size="${base_length} ${base_width} ${base_height}" />
        </geometry>
      </collision>

      <xacro:box_inertia m="${base_mass}" w="${base_width}" d="${base_length}" h="${base_height}" />
    </link>

    <joint name="base_body_joint" type="fixed">
      <parent link="base_link" />
      <child link="base_body" />
      <origin xyz="0.0 0.0 0.0}" rpy="0 0 0" />
    </joint>


    <!-- Robot Footprint -->
    <link name="base_footprint" />

    <joint name="base_joint" type="fixed">
      <parent link="base_link" />
      <child link="base_footprint" />
      <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0" />
    </joint>


    <!-- Wheels -->

    <!-- Rear Wheels -->
    <link name="virtual_rear_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <material name="invisible" />
      </visual>
    </link>

    <joint name="virtual_rear_wheel_joint" type="continuous">
      <parent link="base_body" />
      <child link="virtual_rear_wheel" />
      <origin xyz="${-1*wheel_rear_xoff} 0 ${-wheel_zoff}"
        rpy="0 0 0" />
      <axis xyz="0 1 0" />
      <limit effort="100.0" velocity="100.0" />
      <dynamics damping="0.2" />
    </joint>


    <xacro:macro name="rear_wheel" params="prefix y_reflect">
      <link name="${prefix}_link">
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}" />
          </geometry>
          <material name="Dark gray">
            <color rgba="0.1 0.1 0.1 1.0" />
          </material>
        </visual>

        <collision>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}" />
          </geometry>
        </collision>

        <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}" />
      </link>

      <joint name="${prefix}_joint" type="continuous">
        <parent link="base_body" />
        <child link="${prefix}_link" />
        <origin xyz="${-1*wheel_rear_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}"
          rpy="0 0 0" />
        <axis xyz="0 1 0" />
        <limit effort="100.0" velocity="100.0" />
        <dynamics damping="0.2" />
        <mimic joint="${prefix}virtual_rear_wheel_joint" multiplier="1.0" offset="0.0" />
      </joint>

      <gazebo reference="${prefix}_joint">
        <axis>
          <limit>
            <effort>0.2</effort>
          </limit>
        </axis>
      </gazebo>

    </xacro:macro>

    <xacro:rear_wheel prefix="drivewheel_rear_left" y_reflect="1" />
    <xacro:rear_wheel prefix="drivewheel_rear_right" y_reflect="-1" />

    <!-- Front wheel -->
    <link name="virtual_front_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <material name="invisible" />
      </visual>
    </link>

    <joint name="virtual_front_wheel_joint" type="revolute">
      <parent link="base_body" />
      <child link="virtual_front_wheel" />
      <origin xyz="${1*wheel_front_xoff} 0 ${-wheel_zoff}"
        rpy="0 0 0" />
      <axis xyz="0 0 1" />
      <limit lower="-0.4" upper="0.4" effort="100.0" velocity="10.0" />
      <dynamics damping="0.2" />
    </joint>

    <xacro:macro name="front_wheel" params="prefix y_reflect">
      <link name="${prefix}_link">
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}" />
          </geometry>
          <material name="Dark gray">
            <color rgba="0.1 0.1 0.1 1.0" />
          </material>
        </visual>

        <collision>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}" />
          </geometry>
        </collision>

        <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}" />
      </link>

      <joint name="${prefix}_joint" type="revolute">
        <parent link="base_body" />
        <child link="${prefix}_link" />
        <origin xyz="${1*wheel_front_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}"
          rpy="0 0 0" />
        <axis xyz="0 0 1" />
        <limit lower="-0.4" upper="0.4" effort="100.0" velocity="10.0" />
        <dynamics damping="0.2" />
        <mimic joint="virtual_front_wheel_joint" multiplier="1.0" offset="0.0" />
      </joint>

      <gazebo reference="${prefix}_joint">
        <axis>
          <limit>
            <effort>0.2</effort>
          </limit>
        </axis>
      </gazebo>

    </xacro:macro>

    <xacro:front_wheel prefix="drivewheel_front_left" y_reflect="1" />
    <xacro:front_wheel prefix="drivewheel_fronr_right" y_reflect="-1" />


    <!-- Import carlikebot ros2_control description -->
    <!-- <xacro:include filename="$(find
  ros2_control_demo_example_11)/ros2_control/carlikebot.ros2_control.xacro" /> -->

    <!-- <xacro:carlikebot prefix="$(arg prefix)" /> -->

    <!-- <xacro:carlikebot_ros2_control name="CarlikeBot" prefix="$(arg prefix)" /> -->
  </xacro:macro>

</robot>